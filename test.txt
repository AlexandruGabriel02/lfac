_STRUCTURES_
custom myCustom
{
vars:
    var int $x;
    var string $y;
methods:
    function functieVoid (){    
        array int $int_arr <- [0, 1, 2, 3, 4, 5];

        $int_arr[4] <- 0;
    }

    function functieBool(var const char $ch) : bool 
    {
        var char $ch2;
        var bool $retValue;

        if $ch2 == $ch 
        {
            $retValue <- true;
        }
        else 
        {
            $retValue <- false;
        }

        $ch2 <- 'd' + $ch;

        return $retValue;
    }
}

custom emptyObj
{
vars:
methods:
}

_GLOBAL_VARS_
var int $t, $z <- -2;
var string $str, $a <- "xA01", $b <- "ABC";
array bool $bb <- [ true, true, false, false], $arr;
var const float $fl <- 12., $c <- 12.12;
custom myCustom $obj(102, "string_type");
custom const emptyObj $obj2;


_FUNCTIONS_
function floatFunc() : float 
{
    for $a in $b
    {
        if $t < 10
        {
            $z <- $z + 1;
        }
        elif $t > 10
        {

        }
        elif $t != 0
        {
            
        }
         else
        {

        }
    }
    return 12.;
}

function intFunc1(var int $ds) : int 
{
    repeat
    {
        $b <- "altceva";
        while $a < $b
        {$z <- 3;}
    }
    until $b != $a and $a != $b;
    return 20;
}

function intFunc2 (var const int $param, var string $p_str) : int
{ 
    var char $character;
    $p_str <- "string" + "parametru";

    while $a<$b
    {
      $z <- $z + 1;  
    } 
    return 10;
}

_BEGIN_PROGR_

array bool $boolarr <- [true, false, false];

$boolarr[2] <- $obj->functieBool('l' + 'f' + 'a' + 'c');
$obj->functieVoid();
var int $v1 <- 99;

TypeOf("un string obisnuit");
TypeOf($bb[2] + $bb[1] + false);
TypeOf( (intFunc2(1 + 2 / 2, "abc") + $z) * 3 / 2 );
TypeOf($obj->functieVoid());

Eval('l' + 'f' + 'a' + 'c');
Eval((-2 + 3) * 5 + (13 / 4 % 2));
Eval($v1 + $z);
Eval(10 * $t);
Eval(intFunc1(100));

array int $lfac <- [5, 1, 3, 9, 121, 0];
Eval($lfac[4]);